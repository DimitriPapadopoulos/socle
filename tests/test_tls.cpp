#include <gtest/gtest.h>
#include <sslcom.hpp>


unsigned char tls_sni_smithproxy[] = {
        0x16, 0x03, 0x01, 0x01, 0x62, 0x01, 0x00, 0x01,
        0x5e, 0x03, 0x03, 0x34, 0x4f, 0x0a, 0x93, 0x4b,
        0xe7, 0x65, 0x90, 0x0f, 0x9d, 0x14, 0xd5, 0x0a,
        0xc4, 0xbf, 0x28, 0x56, 0x68, 0x33, 0xb8, 0xa5,
        0x91, 0xb1, 0x4d, 0x4c, 0xdf, 0xb9, 0x9d, 0x6b,
        0x0a, 0x34, 0x84, 0x20, 0x3d, 0xbb, 0x6a, 0x05,
        0x4c, 0x2a, 0x06, 0x48, 0x1c, 0x39, 0x0b, 0x50,
        0x13, 0x3f, 0x6f, 0x42, 0x85, 0x1b, 0xeb, 0x79,
        0x52, 0x0d, 0x83, 0x93, 0xa6, 0xd7, 0xa1, 0x57,
        0x7c, 0x0d, 0x54, 0x3d, 0x00, 0x66, 0x13, 0x02,
        0x13, 0x03, 0x13, 0x01, 0xc0, 0x2c, 0xc0, 0x30,
        0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa,
        0xc0, 0xaf, 0xc0, 0xad, 0xc0, 0xa3, 0xc0, 0x9f,
        0xc0, 0x5d, 0xc0, 0x61, 0xc0, 0x53, 0xc0, 0x24,
        0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x0a, 0xc0, 0x14,
        0x00, 0x39, 0x00, 0x9d, 0xc0, 0xa1, 0xc0, 0x9d,
        0xc0, 0x51, 0x00, 0x3d, 0x00, 0x35, 0xc0, 0x2b,
        0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0xae, 0xc0, 0xac,
        0xc0, 0xa2, 0xc0, 0x9e, 0xc0, 0x5c, 0xc0, 0x60,
        0xc0, 0x52, 0xc0, 0x23, 0xc0, 0x27, 0x00, 0x67,
        0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9c,
        0xc0, 0xa0, 0xc0, 0x9c, 0xc0, 0x50, 0x00, 0x3c,
        0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x00, 0xaf,
        0x00, 0x00, 0x00, 0x13, 0x00, 0x11, 0x00, 0x00,
        0x0e, 0x73, 0x6d, 0x69, 0x74, 0x68, 0x70, 0x72,
        0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x72, 0x67, 0x00,
        0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00,
        0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d, 0x00,
        0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x00,
        0x23, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
        0x00, 0x12, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
        0x00, 0x0d, 0x00, 0x2a, 0x00, 0x28, 0x04, 0x03,
        0x05, 0x03, 0x06, 0x03, 0x08, 0x07, 0x08, 0x08,
        0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
        0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01,
        0x06, 0x01, 0x03, 0x03, 0x03, 0x01, 0x03, 0x02,
        0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x00, 0x2b,
        0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03, 0x00,
        0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x33, 0x00,
        0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x92,
        0x14, 0xa1, 0x86, 0xf9, 0x13, 0x4a, 0x8d, 0x3f,
        0x73, 0x26, 0xc2, 0x57, 0x15, 0xa6, 0x97, 0xb8,
        0xeb, 0x49, 0x51, 0xb4, 0x9c, 0x61, 0x60, 0xc6,
        0xa9, 0xd3, 0xa6, 0xc2, 0x08, 0x24, 0x33
};


unsigned char tls_sni_smithproxy_alpn[] = {
        0x16, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01,
        0xfc, 0x03, 0x03, 0xef, 0x38, 0x34, 0x82, 0xd4,
        0x72, 0x82, 0x85, 0xf4, 0xdd, 0x9f, 0xef, 0xcb,
        0xff, 0x58, 0x24, 0xe8, 0xd3, 0xe8, 0x34, 0x76,
        0xae, 0xdd, 0xb4, 0x65, 0xa1, 0xdf, 0x50, 0x76,
        0x55, 0xfd, 0x61, 0x20, 0x03, 0xcb, 0x43, 0x47,
        0x19, 0x94, 0x2d, 0x5c, 0x59, 0xd6, 0xbd, 0x7e,
        0x9f, 0x3b, 0xd6, 0x96, 0x1a, 0x16, 0x22, 0x0b,
        0x53, 0x6a, 0xbf, 0x6c, 0x36, 0x90, 0x22, 0x87,
        0xb1, 0x68, 0x52, 0x32, 0x00, 0x3e, 0x13, 0x02,
        0x13, 0x03, 0x13, 0x01, 0xc0, 0x2c, 0xc0, 0x30,
        0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa,
        0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x24,
        0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23, 0xc0, 0x27,
        0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14, 0x00, 0x39,
        0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9d,
        0x00, 0x9c, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35,
        0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x01, 0x75,
        0x00, 0x00, 0x00, 0x13, 0x00, 0x11, 0x00, 0x00,
        0x0e, 0x73, 0x6d, 0x69, 0x74, 0x68, 0x70, 0x72,
        0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x72, 0x67, 0x00,
        0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00,
        0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d, 0x00,
        0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x33,
        0x74, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00,
        0x0c, 0x02, 0x68, 0x32, 0x08, 0x68, 0x74, 0x74,
        0x70, 0x2f, 0x31, 0x2e, 0x31, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x31, 0x00,
        0x00, 0x00, 0x0d, 0x00, 0x2a, 0x00, 0x28, 0x04,
        0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x07, 0x08,
        0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08,
        0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05,
        0x01, 0x06, 0x01, 0x03, 0x03, 0x03, 0x01, 0x03,
        0x02, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x00,
        0x2b, 0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03,
        0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x33,
        0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20,
        0xb0, 0x57, 0x60, 0xb9, 0x12, 0xd1, 0xdd, 0x1f,
        0xc8, 0xd1, 0xb2, 0x15, 0xd0, 0xe2, 0xa1, 0x55,
        0x0a, 0x6e, 0x97, 0x7f, 0xc8, 0x6a, 0x3b, 0x78,
        0xee, 0xda, 0xae, 0xae, 0xbe, 0xd9, 0x15, 0x4c,
        0x00, 0x15, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00
};


static auto const LEVEL = loglevel(iDEB);
static void init_log() {
    Log::init();
    Log::get()->level(LEVEL);
    Log::get()->dup2_cout(true);
}

struct SSLCom_Buddy : public SSLCom {
    void test_peer_hello_buffer(buffer const& b) { sslcom_peer_hello_buffer.assign( (void*)b.data(), b.size(), b.size(), false); }
    void test_parse_sni() { parse_peer_hello(); }
};




TEST(TLS_Tests, ParseClientHello_SNI) {

    init_log();
    auto& data =  tls_sni_smithproxy;


    buffer b;
    b.assign(data, sizeof(data), sizeof(data), false);

    SSLCom_Buddy s;
    logan::get()["com.ssl"]->level(iDEB);

    s.test_peer_hello_buffer(b);
    s.test_parse_sni();

    std::stringstream ss;

    std::cout << s.hr() << " SNI: " << s.get_peer_sni() << "\n";

    ASSERT_TRUE(s.get_peer_sni() == "smithproxy.org");
}

TEST(TLS_Tests, ParseClientHello_ALPN) {

    init_log();

    auto& data =  tls_sni_smithproxy_alpn;

    buffer b;
    b.assign(data, sizeof(data), sizeof(data), false);

    SSLCom_Buddy s;
    logan::get()["com.ssl"]->level(iDEB);

    s.test_peer_hello_buffer(b);
    s.test_parse_sni();

    std::stringstream ss;

    std::cout << s.hr() << " SNI: " << s.get_peer_sni() << " ALPN: " << s.get_peer_alpn() << "\n";

    std::stringstream exp;
    exp << static_cast<unsigned char>(0x02);
    exp << "h2";
    exp << static_cast<unsigned char>(0x08);
    exp << "http/1.1";

    ASSERT_TRUE(s.get_peer_alpn() == exp.str());
}